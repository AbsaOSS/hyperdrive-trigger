name: Create a new release

on:
  workflow_dispatch:
    inputs:
      tag-name:
        description: 'Tag for release (e.g., v0.5.2)'
        required: true

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches

      - name: Validate format of received tag
        uses: actions/github-script@v7
        with:
          script: |
            const newTag = core.getInput('tag-name');
            const regex = /^v[0-9]+\.[0-9]+\.[0-9]+$/;

            if (!regex.test(newTag)) {
              core.setFailed('Tag does not match the required format "v[0-9]+.[0-9]+.[0-9]+". Valid example: v0.5.2');
              return;
            }
          tag-name: ${{ github.event.inputs.tag-name }}

      - name: Define semantic version number
        id: semantic_version
        run: |
          TAG_NAME="${{ github.event.inputs.tag-name }}"
          VERSION=${TAG_NAME#v}
          echo "VERSION=${VERSION}" >> "${GITHUB_ENV}"

      - name: Configure Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create release branch
        run: |
          git checkout -b release/${VERSION}
          git push origin release/${VERSION}

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '1.8'

      - name: Set Maven project version, create tag
        run: |
          git pull origin release/${VERSION}
          mvn versions:set -DnewVersion=${VERSION} --no-transfer-progress
          mvn versions:commit
          git commit -am "Set project version to ${VERSION}"
          git push origin release/${VERSION}

      - name: Create tag
        run: |
          git tag ${{ github.event.inputs.tag-name }}
          git push origin ${{ github.event.inputs.tag-name }}

      - name: Set next development version
        run: |
          # Assumes semantic versioning and increments the minor version. Adjust the awk command as needed for different versioning schemes.
          NEXT_VERSION=$(echo ${VERSION} | awk -F. '{print $1"."$2+1".0-SNAPSHOT"}')
          mvn versions:set -DnewVersion=$NEXT_VERSION --no-transfer-progress
          mvn versions:commit
          git commit -am "Set project version to $NEXT_VERSION"
          git push origin release/${VERSION}

      - name: Get Default Branch
        id: get_default_branch
        uses: actions/github-script@v7
        with:
          script: |
            const response = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            return response.data.default_branch;

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = `release/${process.env.VERSION}`;
            await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Release ${{ github.event.inputs.tag-name }}',
              head: branch,
              base: ${{ steps.get_default_branch.outputs.result }},
              body: 'Pull request to merge release ${{ github.event.inputs.tag-name }} into default branch',
              draft: false
            });

      - name: Create Draft Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ github.event.inputs.tag-name }}
          body: ${{ steps.generate_release_notes.outputs.releaseNotes }}
          tag_name: ${{ github.event.inputs.tag-name }}
          draft: true
          prerelease: false
